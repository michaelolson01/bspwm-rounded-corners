Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 bspwm (0.9.10-2) unstable; urgency=medium
 .
   * Fix install path of zsh completion file. (Closes: #966539)
Author: Nobuhiro Iwamatsu <iwamatsu@debian.org>
Bug-Debian: https://bugs.debian.org/966539

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-02-04

--- bspwm-0.9.10.orig/Makefile
+++ bspwm-0.9.10/Makefile
@@ -2,7 +2,7 @@ VERCMD  ?= git describe --tags 2> /dev/n
 VERSION := $(shell $(VERCMD) || cat VERSION)
 
 CPPFLAGS += -D_POSIX_C_SOURCE=200809L -DVERSION=\"$(VERSION)\"
-CFLAGS   += -std=c99 -pedantic -Wall -Wextra -DJSMN_STRICT
+CFLAGS   += -std=c99 -pedantic -Wall -Wextra -DJSMN_STRICT -fcommon
 LDFLAGS  ?=
 LDLIBS    = $(LDFLAGS) -lm -lxcb -lxcb-util -lxcb-keysyms -lxcb-icccm -lxcb-ewmh -lxcb-randr -lxcb-xinerama -lxcb-shape
 
--- bspwm-0.9.10.orig/doc/bspwm.1
+++ bspwm-0.9.10/doc/bspwm.1
@@ -2,12 +2,12 @@
 .\"     Title: bspwm
 .\"    Author: [see the "Author" section]
 .\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
-.\"      Date: 08/02/2020
+.\"      Date: 09/08/2020
 .\"    Manual: Bspwm Manual
-.\"    Source: Bspwm 0.9.10
+.\"    Source: Bspwm 0.9.10-9-gab72002
 .\"  Language: English
 .\"
-.TH "BSPWM" "1" "08/02/2020" "Bspwm 0\&.9\&.10" "Bspwm Manual"
+.TH "BSPWM" "1" "09/08/2020" "Bspwm 0\&.9\&.10\-9\-gab72002" "Bspwm Manual"
 .\" -----------------------------------------------------------------
 .\" * Define some portability stuff
 .\" -----------------------------------------------------------------
@@ -328,6 +328,9 @@ DESKTOP_SEL := [DESKTOP_SEL#](CYCLE_DIR|
                               [MONITOR_SEL:](focused|^<n>)|
                               <desktop_id>|<desktop_name>)[\&.[!]focused][\&.[!]active]
                                                           [\&.[!]occupied][\&.[!]urgent][\&.[!]local]
+                                                          [\&.[!]LAYOUT][\&.[!]user_LAYOUT]
+
+LAYOUT := tiled|monocle
 .fi
 .if n \{\
 .RE
@@ -426,6 +429,16 @@ Only consider urgent desktops\&.
 .RS 4
 Only consider desktops inside the reference monitor\&.
 .RE
+.PP
+[!](tiled|monocle)
+.RS 4
+Only consider desktops with the given layout\&.
+.RE
+.PP
+[!](user_tiled|user_monocle)
+.RS 4
+Only consider desktops which have the given layout as userLayout\&.
+.RE
 .RE
 .SS "Monitor"
 .sp
@@ -1043,7 +1056,7 @@ rule \fICOMMANDS\fR
 Create a new rule\&.
 .RE
 .PP
-\fB\-r\fR, \fB\-\-remove\fR ^<n>|head|tail|(<class_name>|*)[:(<instance_name>|*)[:(<name>|\e*)]]\&...
+\fB\-r\fR, \fB\-\-remove\fR ^<n>|head|tail|(<class_name>|*)[:(<instance_name>|*)[:(<name>|*)]]\&...
 .RS 4
 Remove the given rules\&.
 .RE
@@ -1371,6 +1384,11 @@ Size of the gap that separates windows\&
 .RS 4
 Window border width\&.
 .RE
+.PP
+\fIborder_radius\fR
+.RS 4
+Window border radius\&.
+.RE
 .SH "POINTER BINDINGS"
 .PP
 \fIclick_to_focus\fR
--- bspwm-0.9.10.orig/doc/bspwm.1.asciidoc
+++ bspwm-0.9.10/doc/bspwm.1.asciidoc
@@ -211,6 +211,9 @@ DESKTOP_SEL := [DESKTOP_SEL#](CYCLE_DIR|
                               [MONITOR_SEL:](focused|^<n>)|
                               <desktop_id>|<desktop_name>)[.[!]focused][.[!]active]
                                                           [.[!]occupied][.[!]urgent][.[!]local]
+                                                          [.[!]LAYOUT][.[!]user_LAYOUT]
+
+LAYOUT := tiled|monocle
 ----
 
 Descriptors
@@ -264,6 +267,12 @@ Modifiers
 [!]local::
 	Only consider desktops inside the reference monitor.
 
+[!](tiled|monocle)::
+	Only consider desktops with the given layout.
+
+[!](user_tiled|user_monocle)::
+	Only consider desktops which have the given layout as userLayout.
+
 Monitor
 ~~~~~~~
 
@@ -618,7 +627,7 @@ Commands
 *-a*, *--add* (<class_name>|\*)[:(<instance_name>|\*)[:(<name>|\*)]] [*-o*|*--one-shot*] [monitor=MONITOR_SEL|desktop=DESKTOP_SEL|node=NODE_SEL] [state=STATE] [layer=LAYER] [split_dir=DIR] [split_ratio=RATIO] [(hidden|sticky|private|locked|marked|center|follow|manage|focus|border)=(on|off)] [rectangle=WxH+X+Y]::
 	Create a new rule.
 
-*-r*, *--remove* ^<n>|head|tail|(<class_name>|\*)[:(<instance_name>|\*)[:(<name>|\*)]]...::
+*-r*, *--remove* ^<n>|head|tail|(<class_name>|\*)[:(<instance_name>|\*)[:(<name>|*)]]...::
 	Remove the given rules.
 
 *-l*, *--list*::
@@ -798,6 +807,9 @@ Node Settings
 'border_width'::
 	Window border width.
 
+'border_radius'::
+	Window border radius.
+
 Pointer Bindings
 ----------------
 
--- bspwm-0.9.10.orig/src/desktop.c
+++ bspwm-0.9.10/src/desktop.c
@@ -302,6 +302,8 @@ void add_desktop(monitor_t *m, desktop_t
 	d->window_gap = m->window_gap;
 	insert_desktop(m, d);
 	ewmh_update_number_of_desktops();
+	ewmh_update_current_desktop();
+	ewmh_update_number_of_desktops();
 	ewmh_update_desktop_names();
 	ewmh_update_desktop_viewport();
 	ewmh_update_wm_desktops();
--- bspwm-0.9.10.orig/src/desktop.h
+++ bspwm-0.9.10/src/desktop.h
@@ -27,7 +27,6 @@
 
 #define DEFAULT_DESK_NAME    "Desktop"
 
-void focus_desktop(monitor_t *m, desktop_t *d);
 bool activate_desktop(monitor_t *m, desktop_t *d);
 bool find_closest_desktop(coordinates_t *ref, coordinates_t *dst, cycle_dir_t dir, desktop_select_t *sel);
 bool find_any_desktop(coordinates_t *ref, coordinates_t *dst, desktop_select_t *sel);
@@ -46,5 +45,6 @@ bool swap_desktops(monitor_t *m1, deskto
 void show_desktop(desktop_t *d);
 void hide_desktop(desktop_t *d);
 bool is_urgent(desktop_t *d);
+void focus_desktop(monitor_t *m, desktop_t *d);
 
 #endif
--- bspwm-0.9.10.orig/src/messages.c
+++ bspwm-0.9.10/src/messages.c
@@ -1465,6 +1465,13 @@ void set_setting(coordinates_t loc, char
 			return;
 		}
 		SET_DEF_DEFMON_DEFDESK_WIN(border_width, bw)
+	} else if (streq("border_radius", name)) {
+		unsigned int br;
+		if (sscanf(value, "%u", &br) != 1) {
+			fail(rsp, "config: %s: Invalid value: '%s'.\n", name, value);
+			return;
+		}
+		SET_DEF_DEFMON_DEFDESK_WIN(border_radius, br)
 #undef SET_DEF_DEFMON_DEFDESK_WIN
 #define SET_DEF_DEFMON_DESK(k, v) \
 		if (loc.desktop != NULL) { \
@@ -1759,6 +1766,21 @@ void get_setting(coordinates_t loc, char
 		} else {
 			fprintf(rsp, "%u", border_width);
 		}
+	} else if (streq("border_radius", name)) {
+		if (loc.node != NULL) {
+			for (node_t *n = first_extrema(loc.node); n != NULL; n = next_leaf(n, loc.node)) {
+				if (n->client != NULL) {
+					fprintf(rsp, "%u", n->client->border_radius);
+					break;
+				}
+			}
+		} else if (loc.desktop != NULL) {
+			fprintf(rsp, "%u", loc.desktop->border_radius);
+		} else if (loc.monitor != NULL) {
+			fprintf(rsp, "%u", loc.monitor->border_radius);
+		} else {
+			fprintf(rsp, "%u", border_radius);
+		}
 	} else if (streq("window_gap", name)) {
 		if (loc.desktop != NULL) {
 			fprintf(rsp, "%i", loc.desktop->window_gap);
--- bspwm-0.9.10.orig/src/parse.c
+++ bspwm-0.9.10/src/parse.c
@@ -503,6 +503,10 @@ bool parse_desktop_modifiers(char *desc,
 		GET_MOD(active)
 		GET_MOD(urgent)
 		GET_MOD(local)
+		GET_MOD(tiled)
+		GET_MOD(monocle)
+		GET_MOD(user_tiled)
+		GET_MOD(user_monocle)
 		} else {
 			return false;
 		}
--- bspwm-0.9.10.orig/src/query.c
+++ bspwm-0.9.10/src/query.c
@@ -76,6 +76,7 @@ void query_monitor(monitor_t *m, FILE *r
 	fprintf(rsp, "\"stickyCount\":%i,", m->sticky_count);
 	fprintf(rsp, "\"windowGap\":%i,", m->window_gap);
 	fprintf(rsp, "\"borderWidth\":%u,", m->border_width);
+	fprintf(rsp, "\"borderRadius\":%u,", m->border_radius);
 	fprintf(rsp, "\"focusedDesktopId\":%u,", m->desk->id);
 	fprintf(rsp, "\"padding\":");
 	query_padding(m->padding, rsp);
@@ -104,6 +105,7 @@ void query_desktop(desktop_t *d, FILE *r
 	fprintf(rsp, "\"userLayout\":\"%s\",", LAYOUT_STR(d->user_layout));
 	fprintf(rsp, "\"windowGap\":%i,", d->window_gap);
 	fprintf(rsp, "\"borderWidth\":%u,", d->border_width);
+	fprintf(rsp, "\"borderRadius\":%u,", d->border_radius);
 	fprintf(rsp, "\"focusedNodeId\":%u,", d->focus != NULL ? d->focus->id : 0);
 	fprintf(rsp, "\"padding\":");
 	query_padding(d->padding, rsp);
@@ -167,6 +169,7 @@ void query_client(client_t *c, FILE *rsp
 		fprintf(rsp, "\"className\":\"%s\",", c->class_name);
 		fprintf(rsp, "\"instanceName\":\"%s\",", c->instance_name);
 		fprintf(rsp, "\"borderWidth\":%u,", c->border_width);
+		fprintf(rsp, "\"borderRadius\":%u,", c->border_radius);
 		fprintf(rsp, "\"state\":\"%s\",", STATE_STR(c->state));
 		fprintf(rsp, "\"lastState\":\"%s\",", STATE_STR(c->last_state));
 		fprintf(rsp, "\"layer\":\"%s\",", LAYER_STR(c->layer));
@@ -511,7 +514,11 @@ desktop_select_t make_desktop_select(voi
 		.focused = OPTION_NONE,
 		.active = OPTION_NONE,
 		.urgent = OPTION_NONE,
-		.local = OPTION_NONE
+		.local = OPTION_NONE,
+		.tiled = OPTION_NONE,
+		.monocle = OPTION_NONE,
+		.user_tiled = OPTION_NONE,
+		.user_monocle = OPTION_NONE
 	};
 	return sel;
 }
@@ -527,6 +534,8 @@ monitor_select_t make_monitor_select(voi
 
 int node_from_desc(char *desc, coordinates_t *ref, coordinates_t *dst)
 {
+	dst->node = NULL;
+
 	coordinates_t ref_copy = *ref;
 	ref = &ref_copy;
 	char *desc_copy = copy_string(desc, strlen(desc));
@@ -565,8 +574,6 @@ int node_from_desc(char *desc, coordinat
 		return SELECTOR_BAD_MODIFIERS;
 	}
 
-	dst->node = NULL;
-
 	direction_t dir;
 	cycle_dir_t cyc;
 	history_dir_t hdi;
@@ -676,6 +683,8 @@ int node_from_desc(char *desc, coordinat
 
 int desktop_from_desc(char *desc, coordinates_t *ref, coordinates_t *dst)
 {
+	dst->desktop = NULL;
+
 	if (*desc == '%') {
 		locate_desktop(desc + 1, dst);
 		goto end;
@@ -708,8 +717,6 @@ int desktop_from_desc(char *desc, coordi
 		return SELECTOR_BAD_MODIFIERS;
 	}
 
-	dst->desktop = NULL;
-
 	cycle_dir_t cyc;
 	history_dir_t hdi;
 	uint16_t idx;
@@ -794,6 +801,8 @@ end:
 
 int monitor_from_desc(char *desc, coordinates_t *ref, coordinates_t *dst)
 {
+	dst->monitor = NULL;
+
 	if (*desc == '%') {
 		locate_monitor(desc + 1, dst);
 		goto end;
@@ -825,8 +834,6 @@ int monitor_from_desc(char *desc, coordi
 		return SELECTOR_BAD_MODIFIERS;
 	}
 
-	dst->monitor = NULL;
-
 	direction_t dir;
 	cycle_dir_t cyc;
 	history_dir_t hdi;
@@ -1240,6 +1247,28 @@ bool desktop_matches(coordinates_t *loc,
 		return false;
 	}
 
+#define DLAYOUT(p, e) \
+	if (sel->p != OPTION_NONE && \
+	    loc->desktop->layout != e \
+	    ? sel->p == OPTION_TRUE \
+	    : sel->p == OPTION_FALSE) { \
+		return false; \
+	}
+	DLAYOUT(tiled, LAYOUT_TILED)
+	DLAYOUT(monocle, LAYOUT_MONOCLE)
+#undef DLAYOUT
+
+#define DUSERLAYOUT(p, e) \
+	if (sel->p != OPTION_NONE && \
+	    loc->desktop->user_layout != e \
+	    ? sel->p == OPTION_TRUE \
+	    : sel->p == OPTION_FALSE) { \
+		return false; \
+	}
+	DUSERLAYOUT(user_tiled, LAYOUT_TILED)
+	DUSERLAYOUT(user_monocle, LAYOUT_MONOCLE)
+#undef DUSERLAYOUT
+
 	return true;
 }
 
--- bspwm-0.9.10.orig/src/settings.c
+++ bspwm-0.9.10/src/settings.c
@@ -40,6 +40,7 @@ padding_t padding;
 padding_t monocle_padding;
 int window_gap;
 unsigned int border_width;
+unsigned int border_radius;
 double split_ratio;
 child_polarity_t initial_polarity;
 automatic_scheme_t automatic_scheme;
@@ -100,6 +101,7 @@ void load_settings(void)
 	monocle_padding = (padding_t) MONOCLE_PADDING;
 	window_gap = WINDOW_GAP;
 	border_width = BORDER_WIDTH;
+	border_radius = BORDER_RADIUS;
 	split_ratio = SPLIT_RATIO;
 	initial_polarity = SECOND_CHILD;
 	automatic_scheme = AUTOMATIC_SCHEME;
--- bspwm-0.9.10.orig/src/settings.h
+++ bspwm-0.9.10/src/settings.h
@@ -41,6 +41,7 @@
 #define MONOCLE_PADDING      {0, 0, 0, 0}
 #define WINDOW_GAP           6
 #define BORDER_WIDTH         1
+#define BORDER_RADIUS        0
 #define SPLIT_RATIO          0.5
 #define AUTOMATIC_SCHEME     SCHEME_LONGEST_SIDE
 #define REMOVAL_ADJUSTMENT   true
@@ -79,6 +80,7 @@ extern padding_t padding;
 extern padding_t monocle_padding;
 extern int window_gap;
 extern unsigned int border_width;
+extern unsigned int border_radius;
 extern double split_ratio;
 extern child_polarity_t initial_polarity;
 extern automatic_scheme_t automatic_scheme;
--- bspwm-0.9.10.orig/src/tree.c
+++ bspwm-0.9.10/src/tree.c
@@ -83,6 +83,7 @@ void apply_layout(monitor_t *m, desktop_
 	}
 
 	if (is_leaf(n)) {
+		unsigned int br = 0;
 
 		if (n->client == NULL) {
 			return;
@@ -117,9 +118,12 @@ void apply_layout(monitor_t *m, desktop_
 				}
 			}
 			n->client->tiled_rectangle = r;
+			if (!gapless_monocle || d->layout != LAYOUT_MONOCLE)
+				br = n->client->border_radius;
 		/* floating clients */
 		} else if (s == STATE_FLOATING) {
 			r = n->client->floating_rectangle;
+			br = n->client->border_radius;
 		/* fullscreen clients */
 		} else {
 			r = m->rectangle;
@@ -130,6 +134,7 @@ void apply_layout(monitor_t *m, desktop_
 
 		if (!rect_eq(r, cr)) {
 			window_move_resize(n->id, r.x, r.y, r.width, r.height);
+			window_rounded_border(n);
 			if (!grabbing) {
 				put_status(SBSC_MASK_NODE_GEOMETRY, "node_geometry 0x%08X 0x%08X 0x%08X %ux%u+%i+%i\n", m->id, d->id, n->id, r.width, r.height, r.x, r.y);
 			}
@@ -137,6 +142,9 @@ void apply_layout(monitor_t *m, desktop_
 
 		window_border_width(n->id, bw);
 
+		n->client->drawn_border_radius = br;
+		window_rounded_border(n);
+
 	} else {
 		xcb_rectangle_t first_rect;
 		xcb_rectangle_t second_rect;
@@ -609,9 +617,38 @@ bool focus_node(monitor_t *m, desktop_t
 
 	draw_border(n, true, true);
 
-	focus_desktop(m, d);
+	bool desk_changed = (m != mon || m->desk != d);
+	bool has_input_focus = false;
+
+	if (mon != m) {
+		mon = m;
+
+		if (pointer_follows_monitor) {
+			center_pointer(m->rectangle);
+		}
 
+		put_status(SBSC_MASK_MONITOR_FOCUS, "monitor_focus 0x%08X\n", m->id);
+	}
+
+	if (m->desk != d) {
+		show_desktop(d);
+		set_input_focus(n);
+		has_input_focus = true;
+		hide_desktop(m->desk);
+		m->desk = d;
+	}
+
+	if (desk_changed) {
+		ewmh_update_current_desktop();
+		put_status(SBSC_MASK_DESKTOP_FOCUS, "desktop_focus 0x%08X 0x%08X\n", m->id, d->id);
+	}
+
+	focus_desktop(m, d);
+	
 	d->focus = n;
+	if (!has_input_focus) {
+		set_input_focus(n);
+	}
 	ewmh_update_active_window();
 	history_add(m, d, n, true);
 
@@ -628,7 +665,7 @@ bool focus_node(monitor_t *m, desktop_t
 
 	stack(d, n, true);
 	set_input_focus(n);
-
+	
 	if (pointer_follows_focus) {
 		center_pointer(get_rectangle(m, d, n));
 	} else if (focus_follows_pointer) {
@@ -705,8 +742,10 @@ client_t *make_client(void)
 	snprintf(c->class_name, sizeof(c->class_name), "%s", MISSING_VALUE);
 	snprintf(c->instance_name, sizeof(c->instance_name), "%s", MISSING_VALUE);
 	c->border_width = border_width;
+	c->border_radius = border_radius;
 	c->urgent = false;
 	c->shown = false;
+	c->sets_own_shape = false;
 	c->wm_flags = 0;
 	c->icccm_props.input_hint = true;
 	c->icccm_props.take_focus = false;
@@ -1543,14 +1582,22 @@ bool swap_nodes(monitor_t *m1, desktop_t
 			draw_border(n1, is_descendant(n1, d2->focus), (m2 == mon));
 		}
 	} else {
-		draw_border(n1, is_descendant(n1, d2->focus), (m2 == mon));
-		draw_border(n2, is_descendant(n2, d1->focus), (m1 == mon));
+		if (!n1_held_focus) {
+			draw_border(n1, is_descendant(n1, d2->focus), (m2 == mon));
+		}
+		if (!n2_held_focus) {
+			draw_border(n2, is_descendant(n2, d1->focus), (m1 == mon));
+		}
 	}
 
 	arrange(m1, d1);
 
 	if (d1 != d2) {
 		arrange(m2, d2);
+	} else {
+		if (pointer_follows_focus && (n1_held_focus || n2_held_focus)) {
+			center_pointer(get_rectangle(m1, d1, d1->focus));
+		}
 	}
 
 	return true;
--- bspwm-0.9.10.orig/src/types.h
+++ bspwm-0.9.10/src/types.h
@@ -193,6 +193,10 @@ typedef struct {
 	option_bool_t active;
 	option_bool_t urgent;
 	option_bool_t local;
+	option_bool_t tiled;
+	option_bool_t monocle;
+	option_bool_t user_tiled;
+	option_bool_t user_monocle;
 } desktop_select_t;
 
 typedef struct {
@@ -212,8 +216,11 @@ typedef struct {
 	char instance_name[MAXLEN];
 	char name[MAXLEN];
 	unsigned int border_width;
+	unsigned int border_radius;
+	unsigned int drawn_border_radius;
 	bool urgent;
 	bool shown;
+	bool sets_own_shape;
 	client_state_t state;
 	client_state_t last_state;
 	stack_layer_t layer;
@@ -279,6 +286,7 @@ struct desktop_t {
 	padding_t padding;
 	int window_gap;
 	unsigned int border_width;
+	unsigned int border_radius;
 };
 
 typedef struct monitor_t monitor_t;
@@ -292,6 +300,7 @@ struct monitor_t {
 	unsigned int sticky_count;
 	int window_gap;
 	unsigned int border_width;
+	unsigned int border_radius;
 	xcb_rectangle_t rectangle;
 	desktop_t *desk;
 	desktop_t *desk_head;
--- bspwm-0.9.10.orig/src/window.c
+++ bspwm-0.9.10/src/window.c
@@ -81,7 +81,9 @@ bool manage_window(xcb_window_t win, rul
 
 	if (!ignore_ewmh_struts && ewmh_handle_struts(win)) {
 		for (monitor_t *m = mon_head; m != NULL; m = m->next) {
-			arrange(m, m->desk);
+			for (desktop_t *d = m->desk_head; d != NULL; d = d->next) {
+				arrange(m, d);
+			}
 		}
 	}
 
@@ -135,10 +137,21 @@ bool manage_window(xcb_window_t win, rul
 	node_t *n = make_node(win);
 	client_t *c = make_client();
 	c->border_width = csq->border ? d->border_width : 0;
+	c->border_radius = d->border_radius;
 	n->client = c;
 	initialize_client(n);
 	initialize_floating_rectangle(n);
 
+	xcb_shape_query_extents_reply_t* ext = xcb_shape_query_extents_reply(dpy, xcb_shape_query_extents(dpy, n->id), NULL);
+
+	n->client->sets_own_shape = false;
+	if (ext != NULL) {
+		n->client->sets_own_shape = ext->bounding_shaped || ext->clip_shaped;
+
+		free(ext);
+	}
+	fprintf(stderr, "sets shape: %d\n", n->client->sets_own_shape);
+
 	if (csq->rect != NULL) {
 		c->floating_rectangle = *csq->rect;
 		free(csq->rect);
@@ -216,6 +229,7 @@ bool manage_window(xcb_window_t win, rul
 		draw_border(n, false, (m == mon));
 	}
 
+	window_rounded_border(n);
 	free(csq->layer);
 	free(csq->state);
 
@@ -321,6 +335,7 @@ void draw_presel_feedback(monitor_t *m,
 
 	window_move_resize(p->feedback, n->rectangle.x + presel_rect.x, n->rectangle.y + presel_rect.y,
 	                   presel_rect.width, presel_rect.height);
+	window_rounded_border(n);
 
 	if (!exists && m->desk == d) {
 		window_show(p->feedback);
@@ -414,6 +429,95 @@ void draw_border(node_t *n, bool focused
 	}
 }
 
+void window_rounded_border(node_t *n)
+{
+	xcb_window_t win = n->id;
+	unsigned int radius = n->client->drawn_border_radius;
+
+	if (n->client->sets_own_shape) return;
+
+	// get geometry
+	xcb_get_geometry_reply_t *geo = xcb_get_geometry_reply(dpy, xcb_get_geometry(dpy, win), NULL);
+	if (geo == NULL) return;
+
+	uint16_t x  = geo->x;
+	uint16_t y  = geo->y;
+	uint16_t w  = geo->width;
+	uint16_t h  = geo->height;
+	uint16_t bw = geo->border_width;
+	uint16_t ow  = w+2*bw;
+	uint16_t oh  = h+2*bw;
+
+	free(geo);
+
+	xcb_pixmap_t bpid = xcb_generate_id(dpy);
+	xcb_pixmap_t cpid = xcb_generate_id(dpy);
+
+	xcb_create_pixmap(dpy, 1, bpid, win, ow, oh);
+	xcb_create_pixmap(dpy, 1, cpid, win, w, h);
+
+	xcb_gcontext_t black = xcb_generate_id(dpy);
+	xcb_gcontext_t white = xcb_generate_id(dpy);
+
+	xcb_create_gc(dpy, black, bpid, XCB_GC_FOREGROUND, (uint32_t[]){0, 0});
+	xcb_create_gc(dpy, white, bpid, XCB_GC_FOREGROUND, (uint32_t[]){1, 0});
+
+	int32_t rad, dia;
+	rad = radius;
+
+	rad += bw; dia = rad*2-1;
+
+	xcb_arc_t barcs[] = {
+		{ -1,     -1,     dia, dia, 0, 360 << 6 },
+		{ -1,     oh-dia, dia, dia, 0, 360 << 6 },
+		{ ow-dia, -1,     dia, dia, 0, 360 << 6 },
+		{ ow-dia, oh-dia, dia, dia, 0, 360 << 6 },
+	};
+	xcb_rectangle_t brects[] = {
+		{ rad, 0, ow-dia, oh },
+		{ 0, rad, ow, oh-dia },
+	};
+
+	rad -= bw; dia = rad*2-1;
+
+	xcb_arc_t carcs[] = {
+		{ -1,    -1,    dia, dia, 0, 360 << 6 },
+		{ -1,    h-dia, dia, dia, 0, 360 << 6 },
+		{ w-dia, -1,    dia, dia, 0, 360 << 6 },
+		{ w-dia, h-dia, dia, dia, 0, 360 << 6 },
+	};
+	xcb_rectangle_t crects[] = {
+		{ rad, 0, w-dia, h },
+		{ 0, rad, w, h-dia },
+	};
+
+	xcb_rectangle_t bounding = {0, 0, w+2*bw, h+2*bw};
+	xcb_poly_fill_rectangle(dpy, bpid, black, 1, &bounding);
+	xcb_poly_fill_rectangle(dpy, bpid, white, 2, brects);
+	xcb_poly_fill_arc(dpy, bpid, white, 4, barcs);
+
+	xcb_rectangle_t clipping = {0, 0, w, h};
+	xcb_poly_fill_rectangle(dpy, cpid, black, 1, &clipping);
+	xcb_poly_fill_rectangle(dpy, cpid, white, 2, crects);
+	xcb_poly_fill_arc(dpy, cpid, white, 4, carcs);
+
+	xcb_shape_mask(dpy, XCB_SHAPE_SO_SET, XCB_SHAPE_SK_BOUNDING,  win, -bw, -bw, bpid);
+	xcb_shape_mask(dpy, XCB_SHAPE_SO_SET, XCB_SHAPE_SK_CLIP, win, 0, 0, cpid);
+
+	if (n->presel != NULL && n->presel != XCB_NONE) {
+		xcb_window_t fb = n->presel->feedback;
+		xcb_get_geometry_reply_t *fb_geo = xcb_get_geometry_reply(dpy, xcb_get_geometry(dpy, fb), NULL);
+
+		if (fb_geo != NULL) {
+			xcb_shape_mask(dpy, XCB_SHAPE_SO_SET, XCB_SHAPE_SK_BOUNDING, fb, x-fb_geo->x, y-fb_geo->y, bpid);
+			free(fb_geo);
+		}
+	}
+
+	xcb_free_pixmap(dpy, bpid);
+	xcb_free_pixmap(dpy, cpid);
+}
+
 void window_draw_border(xcb_window_t win, uint32_t border_color_pxl)
 {
 	xcb_change_window_attributes(dpy, win, XCB_CW_BORDER_PIXEL, &border_color_pxl);
@@ -616,6 +720,7 @@ bool resize_client(coordinates_t *loc, r
 		n->client->floating_rectangle = (xcb_rectangle_t) {x, y, width, height};
 		if (n->client->state == STATE_FLOATING) {
 			window_move_resize(n->id, x, y, width, height);
+			window_rounded_border(n);
 
 			if (!grabbing) {
 				put_status(SBSC_MASK_NODE_GEOMETRY, "node_geometry 0x%08X 0x%08X 0x%08X %ux%u+%i+%i\n", loc->monitor->id, loc->desktop->id, loc->node->id, width, height, x, y);
--- bspwm-0.9.10.orig/src/window.h
+++ bspwm-0.9.10/src/window.h
@@ -44,6 +44,7 @@ void hide_presel_feedbacks(monitor_t *m,
 void update_colors(void);
 void update_colors_in(node_t *n, desktop_t *d, monitor_t *m);
 void draw_border(node_t *n, bool focused_node, bool focused_monitor);
+void window_rounded_border(node_t *n);
 void window_draw_border(xcb_window_t win, uint32_t border_color_pxl);
 void adopt_orphans(void);
 uint32_t get_border_color(bool focused_node, bool focused_monitor);
